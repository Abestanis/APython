import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId "com.apython.python.pythonhost"
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                arguments 'NDK_APPLICATION_MK:=' + file('src/main/jni/Application.mk').absolutePath
            }
        }
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }
    tasks.whenTaskAdded {
        task ->
            if (task.name == 'processDebugResources') {
                task.dependsOn {
                    copyPythonExecutable
                }
            }
    }
    task compileExecutable(type: Exec, description: 'Generate the python executable binaries.') {
        workingDir file('src/main')
        inputs.dir file('src/main/jni')
        outputs.dir file('src/main/libs')
        executable Os.isFamily(Os.FAMILY_WINDOWS) ? 'cmd' : 'sh'
        args Os.isFamily(Os.FAMILY_WINDOWS) ? '/c' : '-c',
                new File(getNdkDirectory(), 'ndk-build.cmd').absolutePath + 
                ' NDK_APPLICATION_MK=jni/Application.mk APP_BUILD_SCRIPT=jni/PythonExecutable/Android.mk' +
                ' NDK_OUT=' + getBuildDir().absolutePath + '/intermediates/ndk/obj'
    }
    task copyPythonExecutable(type: Copy,
            description: 'Creates a copy of the generated Python executable to the raw directory.') {
        from 'src/main/libs/armeabi-v7a/python'
        into 'src/main/res/raw'
        dependsOn compileExecutable
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.4.0'
}
